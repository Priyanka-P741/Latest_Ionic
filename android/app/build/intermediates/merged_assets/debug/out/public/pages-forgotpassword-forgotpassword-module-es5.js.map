{"version":3,"sources":["webpack:///src/app/pages/forgotpassword/forgotpassword.page.html","webpack:///src/app/pages/forgotpassword/forgotpassword-routing.module.ts","webpack:///src/app/pages/forgotpassword/forgotpassword.module.ts","webpack:///src/app/pages/forgotpassword/forgotpassword.page.scss","webpack:///src/app/pages/forgotpassword/forgotpassword.page.ts"],"names":["routes","path","component","ForgotpasswordPageRoutingModule","imports","forChild","exports","ForgotpasswordPageModule","declarations","ForgotpasswordPage","alertController","storage","httpClient","router","formsBuilder","items","key","validation_messages","type","message","passwordType","passwordShown","_updatePasswordUrl","console","log","myForm","value","group","empId","required","oldpassword","password","confirmPassword","validators","Password","bind","getData","formGroup","get","passwordNotMatch","headers","append","token","put","JSON","stringify","subscribe","data","set","error","alert","alertError","then","val","undefined","parse","create","header","buttons","text","handler","navigate","present","selector","template"],"mappings":"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","file":"pages-forgotpassword-forgotpassword-module-es5.js","sourcesContent":["export default \"<!-- <ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-back-button defaultHref=\\\"login\\\">Back</ion-back-button>\\r\\n    </ion-buttons>\\r\\n    <ion-title >Reset Your Password</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header> -->\\r\\n\\r\\n<ion-content>\\r\\n  <form [formGroup]=\\\"myForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-back-button defaultHref=\\\"login\\\">Back</ion-back-button>\\r\\n    </ion-buttons>\\r\\n    <div class=\\\"total\\\" >\\r\\n      <h2 class=\\\"heading\\\"  >Reset Your Password</h2>  \\r\\n\\r\\n      <ion-item class=\\\"item\\\" lines=\\\"none\\\" >  \\r\\n        <ion-icon name=\\\"mail-outline\\\"></ion-icon>&nbsp;\\r\\n      <ion-label position=\\\"inline\\\">Emp Id</ion-label>\\r\\n      <ion-input autocomplete=\\\"off\\\" type=\\\"email\\\" formControlName=\\\"empId\\\"></ion-input>\\r\\n      <ng-container *ngFor=\\\"let validation of validation_messages.empId\\\">\\r\\n        <div *ngIf=\\\"myForm.get('empId').hasError(validation.type) && myForm.get('empId').touched\\\">\\r\\n          <small class=\\\"text-danger\\\">**{{validation.message}}</small>\\r\\n        </div>\\r\\n        </ng-container>\\r\\n    </ion-item>\\r\\n    \\r\\n    \\r\\n\\r\\n    <ion-item class=\\\"item\\\" lines=\\\"none\\\"  >  \\r\\n      <ion-icon name=\\\"key-outline\\\"></ion-icon>&nbsp;\\r\\n      <ion-label position=\\\"inline\\\">Old Password</ion-label>\\r\\n      <ion-input autocomplete=\\\"off\\\" type=\\\"password\\\" formControlName=\\\"oldpassword\\\"></ion-input>\\r\\n      <ng-container *ngFor=\\\"let validation of validation_messages.oldpassword\\\">\\r\\n        <div *ngIf=\\\"myForm.get('oldpassword').hasError(validation.type) && myForm.get('oldpassword').touched\\\">\\r\\n          <small class=\\\"text-danger\\\">**{{validation.message}}</small>\\r\\n        </div>\\r\\n        </ng-container>\\r\\n    </ion-item>\\r\\n    \\r\\n    \\r\\n\\r\\n    <ion-item class=\\\"item\\\" lines=\\\"none\\\"  >  \\r\\n      <ion-icon name=\\\"key-outline\\\"></ion-icon>&nbsp;\\r\\n      <ion-label position=\\\"inline\\\">New Password</ion-label>\\r\\n      <ion-icon slot=\\\"end\\\" size=\\\"small\\\"\\r\\n          [name]=\\\"passwordShown === true ? 'eye-sharp' : 'eye-off-sharp'\\\" (click)=\\\"togglePassword()\\\"></ion-icon>\\r\\n      <ion-input autocomplete=\\\"off\\\" formControlName=\\\"password\\\" [type]=\\\"passwordType\\\"></ion-input>\\r\\n    </ion-item>\\r\\n    <!-- <div>\\r\\n      <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\r\\n        <div *ngIf=\\\"!myForm.get('password').hasError(validation.type) && myForm.get('password').touched\\\">\\r\\n          <small class=\\\"text-danger\\\">**{{validation.message}}</small>\\r\\n        </div>\\r\\n        </ng-container>\\r\\n    </div> -->\\r\\n\\r\\n    <ion-item class=\\\"item\\\" lines=\\\"none\\\"  >  \\r\\n      <ion-icon name=\\\"key-outline\\\"></ion-icon>&nbsp;\\r\\n      <ion-label position=\\\"inline\\\">Confirm Password </ion-label>\\r\\n      <ion-icon slot=\\\"end\\\" size=\\\"small\\\" [name]=\\\"passwordShown === true ? 'eye-sharp' : 'eye-off-sharp'\\\"\\r\\n        (click)=\\\"togglePassword()\\\"></ion-icon>\\r\\n      <ion-input  [class.is-invalid]=\\\"myForm.errors?.misMatch\\\" autocomplete=\\\"off\\\" formControlName=\\\"confirmPassword\\\"\\r\\n        [type]=\\\"passwordType\\\"></ion-input>\\r\\n        <div>\\r\\n          <small class=\\\"text-danger\\\" *ngIf=\\\"!myForm.get('confirmPassword').errors && myForm.hasError('passwordNotMatch') && (myForm.get('confirmPassword').dirty || myForm.get('confirmPassword').touched)\\\">**Passwords do not match</small>\\r\\n        </div>\\r\\n    </ion-item>\\r\\n    \\r\\n    <!-- <div>\\r\\n      <ng-container *ngFor=\\\"let validation of validation_messages.confirmPassword\\\">\\r\\n        <div *ngIf=\\\"!myForm.get('confirmPassword').hasError(validation.type) && myForm.get('confirmPassword').touched\\\">\\r\\n          <small class=\\\"text-danger\\\">**{{validation.message}}</small>\\r\\n        </div>\\r\\n        </ng-container>\\r\\n    </div> -->\\r\\n    <br>\\r\\n\\r\\n</div>\\r\\n    <ion-row>\\r\\n      <ion-col></ion-col>\\r\\n      <ion-col>\\r\\n        <ion-button shape=\\\"round\\\" [disabled]=\\\"!myForm.valid\\\" type=\\\"submit\\\" (click)=\\\"sendPutRequest()\\\">Update\\r\\n        </ion-button>\\r\\n      </ion-col>\\r\\n      <ion-col></ion-col>\\r\\n    </ion-row>\\r\\n  </form>\\r\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ForgotpasswordPage } from './forgotpassword.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ForgotpasswordPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ForgotpasswordPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ForgotpasswordPageRoutingModule } from './forgotpassword-routing.module';\n\nimport { ForgotpasswordPage } from './forgotpassword.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    ForgotpasswordPageRoutingModule\n  ],\n  declarations: [ForgotpasswordPage]\n})\nexport class ForgotpasswordPageModule {}\n","export default \"ion-content {\\n  --background: url('photo-1499610519775-f6180db76b5a.jpeg') no-repeat 0 0/100% 100%;\\n  position: relative;\\n  height: auto;\\n  width: 100%;\\n}\\n\\n.item {\\n  --background: rgba(238, 223, 223, 0.39);\\n  --border-width: 1.5px;\\n  margin-top: 5px;\\n  border-radius: 40px;\\n}\\n\\nion-icon {\\n  font-size: 15px;\\n  color: black;\\n}\\n\\nsmall {\\n  color: red;\\n}\\n\\n.total {\\n  padding-top: 60px;\\n  margin-left: 10px;\\n  margin-right: 10px;\\n}\\n\\n.heading {\\n  margin-left: 20%;\\n  margin-bottom: 50px;\\n  color: black;\\n  font: 1.5em sans-serif;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvZm9yZ290cGFzc3dvcmQvQzpcXFVzZXJzXFxCSVZBU1xcRGVza3RvcFxcbGF0ZXN0X0VtcGxveWVlX21hbmFnZW1lbnRcXEVtcGxveWVlX21hbmFnZW1lbnQvc3JjXFxhcHBcXHBhZ2VzXFxmb3Jnb3RwYXNzd29yZFxcZm9yZ290cGFzc3dvcmQucGFnZS5zY3NzIiwic3JjL2FwcC9wYWdlcy9mb3Jnb3RwYXNzd29yZC9mb3Jnb3RwYXNzd29yZC5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFFRSxrRkFBQTtFQUVBLGtCQUFBO0VBQ0EsWUFBQTtFQUNBLFdBQUE7QUNERjs7QURTRztFQUNDLHVDQUFBO0VBQ0EscUJBQUE7RUFDQSxlQUFBO0VBQ0MsbUJBQUE7QUNOTDs7QURVRztFQUNDLGVBQUE7RUFDQSxZQUFBO0FDUEo7O0FEVUU7RUFDRSxVQUFBO0FDUEo7O0FEVUU7RUFDRSxpQkFBQTtFQUNDLGlCQUFBO0VBQ0Msa0JBQUE7QUNQTjs7QURTRTtFQUNFLGdCQUFBO0VBQ0MsbUJBQUE7RUFDQyxZQUFBO0VBQ0Msc0JBQUE7QUNOUCIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2ZvcmdvdHBhc3N3b3JkL2ZvcmdvdHBhc3N3b3JkLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlvbi1jb250ZW50IHtcclxuICAvLyAtLWJhY2tncm91bmQ6IHVybChzcmMvYXNzZXRzL2ltZy9SZWdQYWdlLnBuZykgbm8tcmVwZWF0IHRvcCBjZW50ZXIvY292ZXIgZml4ZWQsICNmZmY7XHJcbiAgLS1iYWNrZ3JvdW5kOiB1cmwoLi4vLi4vLi4vdGhlbWUvcGhvdG8tMTQ5OTYxMDUxOTc3NS1mNjE4MGRiNzZiNWEuanBlZykgbm8tcmVwZWF0IDAgMC8xMDAlIDEwMCUgO1xyXG5cclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgaGVpZ2h0OiBhdXRvO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG59ICBcclxuLy8gaW9uLXRvb2xiYXJ7XHJcbi8vICAgICAtLWJhY2tncm91bmQ6IHJnYigyMTgsIDQ1LCAxNDApO1xyXG4vLyAgIH1cclxuLy8gICBpb24tdGl0bGV7XHJcbi8vICAgICAgIC0tY29sb3JcdDp3aGl0ZTtcclxuLy8gICAgIH1cclxuICAgLml0ZW17XHJcbiAgICAtLWJhY2tncm91bmQ6IHJnYmEoMjM4LCAyMjMsIDIyMywgMC4zOSk7XHJcbiAgICAtLWJvcmRlci13aWR0aDogMS41cHg7XHJcbiAgICBtYXJnaW4tdG9wOiA1cHg7XHJcbiAgICAgYm9yZGVyLXJhZGl1czogNDBweDtcclxuXHJcblxyXG4gICB9XHJcbiAgIGlvbi1pY29uIHtcclxuICAgIGZvbnQtc2l6ZTogMTVweDtcclxuICAgIGNvbG9yOiBibGFjaztcclxuICAgIFxyXG4gIH1cclxuICBzbWFsbHtcclxuICAgIGNvbG9yOnJlZDtcclxuICB9XHJcblxyXG4gIC50b3RhbHtcclxuICAgIHBhZGRpbmctdG9wOiA2MHB4O1xyXG4gICAgIG1hcmdpbi1sZWZ0OjEwcHg7XHJcbiAgICAgIG1hcmdpbi1yaWdodDoxMHB4O1xyXG4gIH1cclxuICAuaGVhZGluZ3tcclxuICAgIG1hcmdpbi1sZWZ0OjIwJTtcclxuICAgICBtYXJnaW4tYm90dG9tOjUwcHg7XHJcbiAgICAgIGNvbG9yOmJsYWNrO1xyXG4gICAgICAgZm9udDogMS41ZW0gc2Fucy1zZXJpZjtcclxuICB9XHJcbiAgIiwiaW9uLWNvbnRlbnQge1xuICAtLWJhY2tncm91bmQ6IHVybCguLi8uLi8uLi90aGVtZS9waG90by0xNDk5NjEwNTE5Nzc1LWY2MTgwZGI3NmI1YS5qcGVnKSBuby1yZXBlYXQgMCAwLzEwMCUgMTAwJSA7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgaGVpZ2h0OiBhdXRvO1xuICB3aWR0aDogMTAwJTtcbn1cblxuLml0ZW0ge1xuICAtLWJhY2tncm91bmQ6IHJnYmEoMjM4LCAyMjMsIDIyMywgMC4zOSk7XG4gIC0tYm9yZGVyLXdpZHRoOiAxLjVweDtcbiAgbWFyZ2luLXRvcDogNXB4O1xuICBib3JkZXItcmFkaXVzOiA0MHB4O1xufVxuXG5pb24taWNvbiB7XG4gIGZvbnQtc2l6ZTogMTVweDtcbiAgY29sb3I6IGJsYWNrO1xufVxuXG5zbWFsbCB7XG4gIGNvbG9yOiByZWQ7XG59XG5cbi50b3RhbCB7XG4gIHBhZGRpbmctdG9wOiA2MHB4O1xuICBtYXJnaW4tbGVmdDogMTBweDtcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xufVxuXG4uaGVhZGluZyB7XG4gIG1hcmdpbi1sZWZ0OiAyMCU7XG4gIG1hcmdpbi1ib3R0b206IDUwcHg7XG4gIGNvbG9yOiBibGFjaztcbiAgZm9udDogMS41ZW0gc2Fucy1zZXJpZjtcbn0iXX0= */\";","import { Component, OnInit } from '@angular/core';\nimport { AlertController } from '@ionic/angular';\nimport {Router} from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { PasswordValidator } from './password.validator';\nimport { AbstractControl } from '@angular/forms';\nimport { HttpClient,HttpHeaders,HttpRequest} from '@angular/common/http';\nimport { Storage } from '@ionic/storage';\n\n@Component({\n  selector: 'app-forgotpassword',\n  templateUrl: './forgotpassword.page.html',\n  styleUrls: ['./forgotpassword.page.scss'],\n})\nexport class ForgotpasswordPage implements OnInit {\n\n  items:any = {};\n  key:string ='items';\n  token:string;\n\n  validation_messages = {\n    'empId' : [\n     { type : 'required' , message: 'EmpId is required.' },\n    ],\n    'oldpassword' : [\n      { type : 'required' , message: 'Password is required.' },\n     ],\n     'password' : [\n      { type : 'required' , message: 'Password is required.' },\n     ],\n     'confirmPassword' : [\n      { type : 'required' , message: 'Password is required.' },\n     ],     \n  }\n\nmyForm: FormGroup;\npasswordType: string =\"password\";\npasswordShown: boolean = false;\n_updatePasswordUrl =\"https://emp-manage90.herokuapp.com/api/password-update\"\n\n  constructor(public alertController: AlertController,public storage:Storage,public httpClient:HttpClient, private router: Router, private formsBuilder : FormBuilder) { }\n\n  onSubmit() {\n    console.log(this.myForm.value);\n  }\n\n  \npublic togglePassword(){\n  if(this.passwordShown){\n    this.passwordShown = false;\n    this.passwordType ='password';\n  } else {\n    this.passwordShown = true;\n    this.passwordType ='text';\n  }\n}\n\n\n\n  ngOnInit() {\n    this.myForm = this.formsBuilder.group({\n      empId:['', [Validators.required]],\n      oldpassword:['', [Validators.required]],\n      password:['',[Validators.required]],\n      confirmPassword:['',[Validators.required]]\n\n    },{ validators: this.Password.bind(this) });\n\n    this.getData();\n  }\n  Password(formGroup:FormGroup) {\n    const { value:password } = formGroup.get('password');\n    const { value:confirmPassword } = formGroup.get('confirmPassword');\n    return password === confirmPassword ? null : {passwordNotMatch:true};\n\n  }\n\n  sendPutRequest() {\n    \n    \n    \n    const headers = new HttpHeaders()\n    .append('Content-Type', 'application/json')\n    .append('Authorization',\tthis.token)\n    .append('Access-Control-Allow-Headers', '*')\n    .append('Access-Control-Allow-Methods', \"GET, POST, DELETE, PUT\")\n    .append('Access-Control-Allow-Origin', '*');\n\n    this.httpClient.put(this._updatePasswordUrl,JSON.stringify(this.myForm.value),{headers} )\n      .subscribe(data => {\n        console.log(data);\n        this.items = data;\n          this.storage.set(this.key,JSON.stringify(this.items));\n          if(!this.items.error){\n            this.alert();\n          }else{\n            this.alertError();\n          }        \n       }, error => {\n        console.log(error);\n      });\n}\n\ngetData(){\n  this.storage.get(this.key).then((val)=>{\n    if(val!=null && val!=undefined){\n      this.items =JSON.parse(val);\n      //console.log(this.items.token);\n      this.token =this.items.token;\n      \n    }\n  })\n}\n\nasync alert(){\n  const alert = await this.alertController.create({\n    header: 'Update Password',\n    message: 'Successfully changed password.',\n    buttons: [{\n      text: 'Ok',\n          handler: () => {\n            this.router.navigate(['/login']);\n          }\n    }]\n  });\n  await alert.present();\n}\n\nasync alertError(){\n  const alert = await this.alertController.create({\n    header: 'Unseccessfull',\n    message: this.items.message,\n    buttons: [{\n      text: 'Ok',\n          handler: () => {\n            this.router.navigate(['forgotpassword']);\n          }\n    }]\n  });\n  await alert.present();\n}\n\n  }\n\n\n"]}